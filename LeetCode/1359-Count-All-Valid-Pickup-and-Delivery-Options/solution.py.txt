# 1359-Count All Valid Pickup and Delivery Options
class Solution:
    def countOrders(self, n: int) -> int:
        MOD = 1_000_000_007
        ans = 1

        for i in range(1, n+1):
            ans = ans * i
            ans = ans * (2 * i - 1)
            ans %= MOD

        return ans
    def countOrders(self, n: int) -> int:
        MOD = 1_000_000_007
        dp = [[0] * (n+1) for i in range(n+1)]
        
        for unpicked in range(n+1):
            for undelivered in range(unpicked, n+1):
                if not unpicked and not undelivered:
                    dp[unpicked][undelivered] = 1
                    continue
                if unpicked > 0:
                    dp[unpicked][undelivered] += unpicked * dp[unpicked -1][undelivered]

                dp[unpicked][undelivered] %= MOD

                if undelivered > unpicked:
                    dp[unpicked][undelivered] += (undelivered - unpicked) * dp[unpicked][undelivered-1]
                dp[unpicked][undelivered] %= MOD
        return dp[n][n]
class Solution:
    def countOrders(self, n: int) -> int:
        @functools.cache
        def totalWays(unpicked, undelivered):
            if not unpicked and not undelivered:
                return 1

            if (unpicked < 0 or undelivered < 0 or undelivered < unpicked):
                return 0

            ans = unpicked * totalWays(unpicked - 1, undelivered)
            ans %= MOD

            ans += (undelivered - unpicked) * totalWays(unpicked, undelivered -1)

            return ans
        
        MOD = 1_000_000_007
        return totalWays(n, n)

        